{"language":"Solidity","sources":{"src/adapters/EOFeedRegistryAdapter.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.25;\n\nimport { EOFeedFactoryBeacon } from \"./factories/EOFeedFactoryBeacon.sol\";\nimport { EOFeedRegistryAdapterBase } from \"./EOFeedRegistryAdapterBase.sol\";\n\n/**\n * @title EOFeedRegistryAdapterClone\n * @notice The adapter of EOFeedManager contract for CL FeedRegistry, uses the beacon\n * @dev This contract inherits EOFeedFactoryBeacon, uses the beacon proxy pattern for deploying EOFeedAdapter instances\n */\n// solhint-disable no-empty-blocks\ncontract EOFeedRegistryAdapter is EOFeedRegistryAdapterBase, EOFeedFactoryBeacon { }\n"},"src/adapters/factories/EOFeedFactoryBeacon.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.25;\n\nimport { Initializable } from \"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\";\nimport { BeaconProxy } from \"@openzeppelin/contracts/proxy/beacon/BeaconProxy.sol\";\nimport { UpgradeableBeacon } from \"@openzeppelin/contracts/proxy/beacon/UpgradeableBeacon.sol\";\nimport { EOFeedFactoryBase } from \"./EOFeedFactoryBase.sol\";\n\nabstract contract EOFeedFactoryBeacon is Initializable, EOFeedFactoryBase {\n    address private _beacon;\n\n    /**\n     * @dev Returns the address of the beacon.\n     */\n    function getBeacon() external view returns (address) {\n        return _beacon;\n    }\n\n    /**\n     * @dev Initializes the factory with the feedAdapter implementation.\n     */\n    function __EOFeedFactory_init(address impl, address initialOwner) internal override onlyInitializing {\n        _beacon = address(new UpgradeableBeacon(impl, initialOwner));\n    }\n\n    /**\n     * @dev Deploys a new feedAdapter instance via Beacon proxy.\n     */\n    function _deployEOFeedAdapter() internal override returns (address) {\n        return address(new BeaconProxy(_beacon, \"\"));\n    }\n}\n"},"src/adapters/EOFeedRegistryAdapterBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.25;\n\nimport { IEOFeedManager } from \"../interfaces/IEOFeedManager.sol\";\nimport { OwnableUpgradeable } from \"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\";\nimport { IEOFeedAdapter } from \"./interfaces/IEOFeedAdapter.sol\";\nimport { IEOFeedRegistryAdapter } from \"./interfaces/IEOFeedRegistryAdapter.sol\";\nimport { EOFeedFactoryBase } from \"./factories/EOFeedFactoryBase.sol\";\nimport { InvalidAddress, FeedAlreadyExists, BaseQuotePairExists, FeedNotSupported } from \"../interfaces/Errors.sol\";\n\n/**\n * @title EOFeedRegistryAdapterBase\n * @notice base contract which is adapter of EOFeedManager contract for CL FeedManager\n */\nabstract contract EOFeedRegistryAdapterBase is OwnableUpgradeable, EOFeedFactoryBase, IEOFeedRegistryAdapter {\n    IEOFeedManager internal _feedManager;\n    mapping(uint16 => IEOFeedAdapter) internal _feedAdapters;\n    mapping(address => bool) internal _feedEnabled;\n    mapping(address => mapping(address => uint16)) internal _tokenAddressesToFeedIds;\n\n    event FeedManagerSet(address indexed feedManager);\n    event FeedAdapterDeployed(uint16 indexed feedId, address indexed feedAdapter, address base, address quote);\n\n    modifier onlyNonZeroAddress(address addr) {\n        if (addr == address(0)) revert InvalidAddress();\n        _;\n    }\n\n    /// @custom:oz-upgrades-unsafe-allow constructor\n    constructor() {\n        _disableInitializers();\n    }\n\n    /**\n     * @notice Initialize the contract\n     * @param feedManager The feed manager address\n     * @param feedAdapterImplementation The feedAdapter implementation address\n     * @param owner Owner of the contract\n     */\n    function initialize(\n        address feedManager,\n        address feedAdapterImplementation,\n        address owner\n    )\n        external\n        initializer\n        onlyNonZeroAddress(feedManager)\n        onlyNonZeroAddress(feedAdapterImplementation)\n    {\n        __Ownable_init(owner);\n        __EOFeedFactory_init(feedAdapterImplementation, owner);\n        _feedManager = IEOFeedManager(feedManager);\n        emit FeedManagerSet(feedManager);\n    }\n\n    /**\n     * @notice Set the feed manager\n     * @param feedManager The feed manager address\n     */\n    function setFeedManager(address feedManager) external onlyOwner onlyNonZeroAddress(feedManager) {\n        _feedManager = IEOFeedManager(feedManager);\n        emit FeedManagerSet(feedManager);\n    }\n\n    /**\n     * @notice deploy EOFeedAdapter\n     * @param base The base asset address\n     * @param quote The quote asset address\n     * @param feedId The feed id\n     * @param feedDescription The description of feed\n     * @param feedDecimals The decimals\n     * @param feedVersion The version of the feed\n     * @return IEOFeedAdapter The feed adapter\n     */\n    // This function can reenter through the external call to the deployed EOFeedAdapter, but the external contract is\n    // being deployed by this contract, so it is considered safe\n    // slither-disable-next-line reentrancy-no-eth,reentrancy-benign,reentrancy-events\n    function deployEOFeedAdapter(\n        address base,\n        address quote,\n        uint16 feedId,\n        string calldata feedDescription,\n        uint8 feedDecimals,\n        uint256 feedVersion\n    )\n        external\n        onlyOwner\n        returns (IEOFeedAdapter)\n    {\n        // check if feedId exists in feedManager contract\n        if (!_feedManager.isSupportedFeed(feedId)) {\n            revert FeedNotSupported(feedId);\n        }\n\n        if (address(_feedAdapters[feedId]) != address(0)) {\n            revert FeedAlreadyExists();\n        }\n        if (_tokenAddressesToFeedIds[base][quote] != 0) {\n            revert BaseQuotePairExists();\n        }\n        address feedAdapter = _deployEOFeedAdapter();\n        IEOFeedAdapter(feedAdapter).initialize(\n            address(_feedManager), feedId, feedDecimals, feedDescription, feedVersion\n        );\n\n        _feedEnabled[feedAdapter] = true;\n        _feedAdapters[feedId] = IEOFeedAdapter(feedAdapter);\n        _tokenAddressesToFeedIds[base][quote] = feedId;\n\n        emit FeedAdapterDeployed(feedId, feedAdapter, base, quote);\n\n        return IEOFeedAdapter(feedAdapter);\n    }\n\n    /**\n     * @notice Get the feed manager\n     * @return IEOFeedManager The feed manager\n     */\n    function getFeedManager() external view returns (IEOFeedManager) {\n        return _feedManager;\n    }\n\n    /**\n     * @notice Get the feedAdapter for a given id\n     * @param feedId The feed id\n     * @return IEOFeedAdapter The feedAdapter\n     */\n    function getFeedById(uint16 feedId) external view returns (IEOFeedAdapter) {\n        return _feedAdapters[feedId];\n    }\n\n    /**\n     * @notice Get the decimals for a given base/quote pair\n     * @dev Calls the decimals function from the feedAdapter itself\n     * @param base The base asset address\n     * @param quote The quote asset address\n     * @return uint8 The decimals\n     */\n    function decimals(address base, address quote) external view returns (uint8) {\n        return _feedAdapters[_tokenAddressesToFeedIds[base][quote]].decimals();\n    }\n\n    /**\n     * @notice Get the description for a given base/quote pair\n     * @dev Calls the description function from the feedAdapter itself\n     * @param base The base asset address\n     * @param quote The quote asset address\n     * @return string The description\n     */\n    function description(address base, address quote) external view returns (string memory) {\n        return _feedAdapters[_tokenAddressesToFeedIds[base][quote]].description();\n    }\n\n    /**\n     * @notice Get the version for a given base/quote pair\n     * @dev Calls the version function from the feedAdapter itself\n     * @param base The base asset address\n     * @param quote The quote asset address\n     * @return uint256 The version\n     */\n    function version(address base, address quote) external view returns (uint256) {\n        return _feedAdapters[_tokenAddressesToFeedIds[base][quote]].version();\n    }\n\n    /**\n     * @notice Get the latest round data for a given base/quote pair\n     * @dev Calls the getLatestPriceFeed function from the feed manager, not from feedAdapter itself\n     * @param base The base asset address\n     * @param quote The quote asset address\n     * @return roundId The roundId\n     * @return answer The answer\n     * @return startedAt The startedAt\n     * @return updatedAt The updatedAt\n     * @return answeredInRound The answeredInRound\n     */\n    function latestRoundData(\n        address base,\n        address quote\n    )\n        external\n        view\n        returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound)\n    {\n        IEOFeedManager.PriceFeed memory feedData =\n            _feedManager.getLatestPriceFeed(_tokenAddressesToFeedIds[base][quote]);\n        return (\n            uint80(feedData.eoracleBlockNumber),\n            int256(feedData.value),\n            feedData.timestamp,\n            feedData.timestamp,\n            uint80(feedData.eoracleBlockNumber)\n        );\n    }\n\n    /**\n     * @notice Get the round data for a given base/quote pair\n     * @dev Calls the getLatestPriceFeed function from the feed manager, not from feedAdapter itself\n     *      currently the roundId is not used and latest round is returned\n     * @param base The base asset address\n     * @param quote The quote asset address\n     * @return roundId The roundId\n     * @return answer The answer\n     * @return startedAt The startedAt\n     * @return updatedAt The updatedAt\n     * @return answeredInRound The answeredInRound\n     */\n    function getRoundData(\n        address base,\n        address quote,\n        uint80\n    )\n        external\n        view\n        returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound)\n    {\n        IEOFeedManager.PriceFeed memory feedData =\n            _feedManager.getLatestPriceFeed(_tokenAddressesToFeedIds[base][quote]);\n        return (\n            uint80(feedData.eoracleBlockNumber),\n            int256(feedData.value),\n            feedData.timestamp,\n            feedData.timestamp,\n            uint80(feedData.eoracleBlockNumber)\n        );\n    }\n\n    /**\n     * @notice Get the latest price for a given base/quote pair\n     * @dev Calls the getLatestPriceFeed function from the feed manager, not from feedAdapter itself\n     * @param base The base asset address\n     * @param quote The quote asset address\n     * @return int256 The latest price\n     */\n    function latestAnswer(address base, address quote) external view override returns (int256) {\n        return int256(_feedManager.getLatestPriceFeed(_tokenAddressesToFeedIds[base][quote]).value);\n    }\n\n    /**\n     * @notice Get the latest timestamp for a given base/quote pair\n     * @dev Calls the getLatestPriceFeed function from the feed manager, not from feedAdapter itself\n     * @param base The base asset address\n     * @param quote The quote asset address\n     * @return uint256 The latest timestamp\n     */\n    function latestTimestamp(address base, address quote) external view returns (uint256) {\n        return _feedManager.getLatestPriceFeed(_tokenAddressesToFeedIds[base][quote]).timestamp;\n    }\n\n    /**\n     * @notice Get the answer for a given base/quote pair and round\n     * @dev Calls the getLatestPriceFeed function from the feed manager, not from feedAdapter itself\n     *      currently the roundId is not used and latest answer is returned\n     * @param base The base asset address\n     * @param quote The quote asset address\n     * @param\n     * @return int256 The answer\n     */\n    function getAnswer(address base, address quote, uint256) external view returns (int256) {\n        return int256(_feedManager.getLatestPriceFeed(_tokenAddressesToFeedIds[base][quote]).value);\n    }\n\n    /**\n     * @notice Get the timestamp for a given base/quote pair and round\n     * @dev Calls the getLatestPriceFeed function from the feed manager, not from feedAdapter itself\n     *      currently the roundId is not used and latest timestamp is returned\n     * @param base The base asset address\n     * @param quote The quote asset address\n     * @param\n     * @return uint256 The timestamp\n     */\n    function getTimestamp(address base, address quote, uint256) external view returns (uint256) {\n        return _feedManager.getLatestPriceFeed(_tokenAddressesToFeedIds[base][quote]).timestamp;\n    }\n\n    /**\n     * @notice Get the feedAdapter for a given base/quote pair\n     * @param base The base asset address\n     * @param quote The quote asset address\n     * @return IEOFeedAdapter The feedAdapter\n     */\n    function getFeed(address base, address quote) external view override returns (IEOFeedAdapter) {\n        return _getFeed(base, quote);\n    }\n\n    /**\n     * @notice Check if a feedAdapter is enabled in the storage of adapter\n     * @param feedAdapter The feedAdapter address\n     * @return bool True if the feedAdapter is enabled\n     */\n    function isFeedEnabled(address feedAdapter) external view returns (bool) {\n        return _feedEnabled[feedAdapter];\n    }\n\n    /**\n     * @notice Get the round feedAdapter for a given base/quote pair\n     * @param base The base asset address\n     * @param quote The quote asset address\n     * @param\n     * @return IEOFeedAdapter The feedAdapter\n     */\n    function getRoundFeed(address base, address quote, uint80) external view returns (IEOFeedAdapter) {\n        return _getFeed(base, quote);\n    }\n\n    /**\n     * @notice Get the latest round for a given base/quote pair\n     * @dev Calls the getLatestPriceFeed function from the feed manager, not from Feed itself\n     *      currently the roundId is not used and 0 is returned\n     * @param base The base asset address\n     * @param quote The quote asset address\n     * @return uint256 The latest round\n     */\n    function latestRound(address base, address quote) external view returns (uint256) {\n        return _feedManager.getLatestPriceFeed(_tokenAddressesToFeedIds[base][quote]).eoracleBlockNumber;\n    }\n\n    /**\n     * @notice Get the feedAdapter for a given base/quote pair\n     * @param base The base asset address\n     * @param quote The quote asset address\n     * @return IEOFeedAdapter The feedAdapter\n     */\n    function _getFeed(address base, address quote) internal view returns (IEOFeedAdapter) {\n        return _feedAdapters[_tokenAddressesToFeedIds[base][quote]];\n    }\n\n    // slither-disable-next-line unused-state,naming-convention\n    // solhint-disable-next-line ordering\n    uint256[50] private __gap;\n}\n"},"lib/openzeppelin-contracts-upgradeable/contracts/proxy/utils/Initializable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\n * reused. This mechanism prevents re-execution of each \"step\" but allows the creation of new initialization steps in\n * case an upgrade adds a module that needs to be initialized.\n *\n * For example:\n *\n * [.hljs-theme-light.nopadding]\n * ```solidity\n * contract MyToken is ERC20Upgradeable {\n *     function initialize() initializer public {\n *         __ERC20_init(\"MyToken\", \"MTK\");\n *     }\n * }\n *\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\n *     function initializeV2() reinitializer(2) public {\n *         __ERC20Permit_init(\"MyToken\");\n *     }\n * }\n * ```\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() {\n *     _disableInitializers();\n * }\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Storage of the initializable contract.\n     *\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\n     * when using with upgradeable contracts.\n     *\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\n     */\n    struct InitializableStorage {\n        /**\n         * @dev Indicates that the contract has been initialized.\n         */\n        uint64 _initialized;\n        /**\n         * @dev Indicates that the contract is in the process of being initialized.\n         */\n        bool _initializing;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Initializable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\n\n    /**\n     * @dev The contract is already initialized.\n     */\n    error InvalidInitialization();\n\n    /**\n     * @dev The contract is not initializing.\n     */\n    error NotInitializing();\n\n    /**\n     * @dev Triggered when the contract has been initialized or reinitialized.\n     */\n    event Initialized(uint64 version);\n\n    /**\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\n     * `onlyInitializing` functions can be used to initialize parent contracts.\n     *\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\n     * production.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier initializer() {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        // Cache values to avoid duplicated sloads\n        bool isTopLevelCall = !$._initializing;\n        uint64 initialized = $._initialized;\n\n        // Allowed calls:\n        // - initialSetup: the contract is not in the initializing state and no previous version was\n        //                 initialized\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\n        //                 current contract is just being deployed\n        bool initialSetup = initialized == 0 && isTopLevelCall;\n        bool construction = initialized == 1 && address(this).code.length == 0;\n\n        if (!initialSetup && !construction) {\n            revert InvalidInitialization();\n        }\n        $._initialized = 1;\n        if (isTopLevelCall) {\n            $._initializing = true;\n        }\n        _;\n        if (isTopLevelCall) {\n            $._initializing = false;\n            emit Initialized(1);\n        }\n    }\n\n    /**\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\n     * used to initialize parent contracts.\n     *\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\n     * are added through upgrades and that require initialization.\n     *\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\n     *\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\n     * a contract, executing them in the right order is up to the developer or operator.\n     *\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\n     *\n     * Emits an {Initialized} event.\n     */\n    modifier reinitializer(uint64 version) {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing || $._initialized >= version) {\n            revert InvalidInitialization();\n        }\n        $._initialized = version;\n        $._initializing = true;\n        _;\n        $._initializing = false;\n        emit Initialized(version);\n    }\n\n    /**\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\n     */\n    modifier onlyInitializing() {\n        _checkInitializing();\n        _;\n    }\n\n    /**\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\n     */\n    function _checkInitializing() internal view virtual {\n        if (!_isInitializing()) {\n            revert NotInitializing();\n        }\n    }\n\n    /**\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\n     * through proxies.\n     *\n     * Emits an {Initialized} event the first time it is successfully executed.\n     */\n    function _disableInitializers() internal virtual {\n        // solhint-disable-next-line var-name-mixedcase\n        InitializableStorage storage $ = _getInitializableStorage();\n\n        if ($._initializing) {\n            revert InvalidInitialization();\n        }\n        if ($._initialized != type(uint64).max) {\n            $._initialized = type(uint64).max;\n            emit Initialized(type(uint64).max);\n        }\n    }\n\n    /**\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\n     */\n    function _getInitializedVersion() internal view returns (uint64) {\n        return _getInitializableStorage()._initialized;\n    }\n\n    /**\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\n     */\n    function _isInitializing() internal view returns (bool) {\n        return _getInitializableStorage()._initializing;\n    }\n\n    /**\n     * @dev Returns a pointer to the storage namespace.\n     */\n    // solhint-disable-next-line var-name-mixedcase\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\n        assembly {\n            $.slot := INITIALIZABLE_STORAGE\n        }\n    }\n}\n"},"lib/openzeppelin-contracts/contracts/proxy/beacon/BeaconProxy.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/BeaconProxy.sol)\n\npragma solidity ^0.8.20;\n\nimport {IBeacon} from \"./IBeacon.sol\";\nimport {Proxy} from \"../Proxy.sol\";\nimport {ERC1967Utils} from \"../ERC1967/ERC1967Utils.sol\";\n\n/**\n * @dev This contract implements a proxy that gets the implementation address for each call from an {UpgradeableBeacon}.\n *\n * The beacon address can only be set once during construction, and cannot be changed afterwards. It is stored in an\n * immutable variable to avoid unnecessary storage reads, and also in the beacon storage slot specified by\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] so that it can be accessed externally.\n *\n * CAUTION: Since the beacon address can never be changed, you must ensure that you either control the beacon, or trust\n * the beacon to not upgrade the implementation maliciously.\n *\n * IMPORTANT: Do not use the implementation logic to modify the beacon storage slot. Doing so would leave the proxy in\n * an inconsistent state where the beacon storage slot does not match the beacon address.\n */\ncontract BeaconProxy is Proxy {\n    // An immutable address for the beacon to avoid unnecessary SLOADs before each delegate call.\n    address private immutable _beacon;\n\n    /**\n     * @dev Initializes the proxy with `beacon`.\n     *\n     * If `data` is nonempty, it's used as data in a delegate call to the implementation returned by the beacon. This\n     * will typically be an encoded function call, and allows initializing the storage of the proxy like a Solidity\n     * constructor.\n     *\n     * Requirements:\n     *\n     * - `beacon` must be a contract with the interface {IBeacon}.\n     * - If `data` is empty, `msg.value` must be zero.\n     */\n    constructor(address beacon, bytes memory data) payable {\n        ERC1967Utils.upgradeBeaconToAndCall(beacon, data);\n        _beacon = beacon;\n    }\n\n    /**\n     * @dev Returns the current implementation address of the associated beacon.\n     */\n    function _implementation() internal view virtual override returns (address) {\n        return IBeacon(_getBeacon()).implementation();\n    }\n\n    /**\n     * @dev Returns the beacon.\n     */\n    function _getBeacon() internal view virtual returns (address) {\n        return _beacon;\n    }\n}\n"},"lib/openzeppelin-contracts/contracts/proxy/beacon/UpgradeableBeacon.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/UpgradeableBeacon.sol)\n\npragma solidity ^0.8.20;\n\nimport {IBeacon} from \"./IBeacon.sol\";\nimport {Ownable} from \"../../access/Ownable.sol\";\n\n/**\n * @dev This contract is used in conjunction with one or more instances of {BeaconProxy} to determine their\n * implementation contract, which is where they will delegate all function calls.\n *\n * An owner is able to change the implementation the beacon points to, thus upgrading the proxies that use this beacon.\n */\ncontract UpgradeableBeacon is IBeacon, Ownable {\n    address private _implementation;\n\n    /**\n     * @dev The `implementation` of the beacon is invalid.\n     */\n    error BeaconInvalidImplementation(address implementation);\n\n    /**\n     * @dev Emitted when the implementation returned by the beacon is changed.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Sets the address of the initial implementation, and the initial owner who can upgrade the beacon.\n     */\n    constructor(address implementation_, address initialOwner) Ownable(initialOwner) {\n        _setImplementation(implementation_);\n    }\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function implementation() public view virtual returns (address) {\n        return _implementation;\n    }\n\n    /**\n     * @dev Upgrades the beacon to a new implementation.\n     *\n     * Emits an {Upgraded} event.\n     *\n     * Requirements:\n     *\n     * - msg.sender must be the owner of the contract.\n     * - `newImplementation` must be a contract.\n     */\n    function upgradeTo(address newImplementation) public virtual onlyOwner {\n        _setImplementation(newImplementation);\n    }\n\n    /**\n     * @dev Sets the implementation contract address for this beacon\n     *\n     * Requirements:\n     *\n     * - `newImplementation` must be a contract.\n     */\n    function _setImplementation(address newImplementation) private {\n        if (newImplementation.code.length == 0) {\n            revert BeaconInvalidImplementation(newImplementation);\n        }\n        _implementation = newImplementation;\n        emit Upgraded(newImplementation);\n    }\n}\n"},"src/adapters/factories/EOFeedFactoryBase.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.25;\n\nabstract contract EOFeedFactoryBase {\n    function __EOFeedFactory_init(address impl, address) internal virtual;\n\n    function _deployEOFeedAdapter() internal virtual returns (address);\n}\n"},"src/interfaces/IEOFeedManager.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.25;\n\nimport { IEOFeedVerifier } from \"./IEOFeedVerifier.sol\";\n\ninterface IEOFeedManager {\n    /**\n     * @dev Price feed structure\n     * @param value Price feed value\n     * @param timestamp Price feed timestamp (block timestamp in eoracle chain when price feed rate is aggregated)\n     * @param eoracleBlockNumber eoracle block number\n     */\n    struct PriceFeed {\n        uint256 value;\n        uint256 timestamp;\n        uint256 eoracleBlockNumber;\n    }\n\n    /**\n     * @dev Event emitted when a price feed is updated\n     * @param feedId Feed id\n     * @param rate Price feed value\n     * @param timestamp Price feed timestamp\n     */\n    event RateUpdated(uint16 indexed feedId, uint256 rate, uint256 timestamp);\n\n    /**\n     * @notice Update the price for a feed\n     * @param input A merkle leaf containing price data and its merkle proof\n     * @param checkpoint Checkpoint data containing eoracle chain metadata and the data merkle root\n     * @param signature Aggregated signature of the checkpoint\n     * @param bitmap Bitmap of the validators who signed the checkpoint\n     */\n    function updatePriceFeed(\n        IEOFeedVerifier.LeafInput calldata input,\n        IEOFeedVerifier.Checkpoint calldata checkpoint,\n        uint256[2] calldata signature,\n        bytes calldata bitmap\n    )\n        external;\n\n    /**\n     * @notice Update the price for multiple feeds\n     * @param inputs Array of leafs to prove the price feeds\n     * @param checkpoint Checkpoint data\n     * @param signature Aggregated signature of the checkpoint\n     * @param bitmap Bitmap of the validators who signed the checkpoint\n     */\n    function updatePriceFeeds(\n        IEOFeedVerifier.LeafInput[] calldata inputs,\n        IEOFeedVerifier.Checkpoint calldata checkpoint,\n        uint256[2] calldata signature,\n        bytes calldata bitmap\n    )\n        external;\n\n    /**\n     * @notice Set the whitelisted publishers\n     * @param publishers Array of publisher addresses\n     * @param isWhitelisted Array of booleans indicating whether the publisher is whitelisted\n     */\n    function whitelistPublishers(address[] memory publishers, bool[] memory isWhitelisted) external;\n\n    /**\n     * @notice Get the latest price for a feed\n     * @param feedId Feed id\n     * @return PriceFeed struct\n     */\n    function getLatestPriceFeed(uint16 feedId) external view returns (PriceFeed memory);\n\n    /**\n     * @notice Get the latest price feeds for multiple feeds\n     * @param feedIds Array of feed ids\n     * @return Array of PriceFeed structs\n     */\n    function getLatestPriceFeeds(uint16[] calldata feedIds) external view returns (PriceFeed[] memory);\n\n    /**\n     * @notice Check if a publisher is whitelisted\n     * @param publisher Address of the publisher\n     * @return Boolean indicating whether the publisher is whitelisted\n     */\n    function isWhitelistedPublisher(address publisher) external view returns (bool);\n\n    /**\n     * @notice Check if a feed is supported\n     * @param feedId feed Id to check\n     * @return Boolean indicating whether the feed is supported\n     */\n    function isSupportedFeed(uint16 feedId) external view returns (bool);\n}\n"},"lib/openzeppelin-contracts-upgradeable/contracts/access/OwnableUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {ContextUpgradeable} from \"../utils/ContextUpgradeable.sol\";\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\n    struct OwnableStorage {\n        address _owner;\n    }\n\n    // keccak256(abi.encode(uint256(keccak256(\"openzeppelin.storage.Ownable\")) - 1)) & ~bytes32(uint256(0xff))\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\n\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\n        assembly {\n            $.slot := OwnableStorageLocation\n        }\n    }\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\n        __Ownable_init_unchained(initialOwner);\n    }\n\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        OwnableStorage storage $ = _getOwnableStorage();\n        return $._owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        OwnableStorage storage $ = _getOwnableStorage();\n        address oldOwner = $._owner;\n        $._owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"src/adapters/interfaces/IEOFeedAdapter.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.25;\n\n/**\n * @title IEOFeedAdapter\n * @notice Interface for the EOFeedAdapter contract.\n * @dev compatible of AggregatorV3Interface from CL.\n */\ninterface IEOFeedAdapter {\n    // slither-disable-next-line missing-inheritance\n    function initialize(\n        address feedManager,\n        uint16 feedId,\n        uint8 feedDecimals,\n        string memory feedDescription,\n        uint256 feedVersion\n    )\n        external;\n\n    function getFeedId() external view returns (uint16);\n    function decimals() external view returns (uint8);\n    function description() external view returns (string memory);\n    function version() external view returns (uint256);\n\n    // getRoundData and latestRoundData should both raise \"No data present\"\n    // if they do not have data to report, instead of returning unset values\n    // which could be misinterpreted as actual reported values.\n    function getRoundData(uint80 roundId_)\n        external\n        view\n        returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n    function latestRoundData()\n        external\n        view\n        returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n    // v2 interface\n    function latestAnswer() external view returns (int256);\n\n    function latestTimestamp() external view returns (uint256);\n\n    function latestRound() external view returns (uint256);\n\n    function getAnswer(uint256 roundId) external view returns (int256);\n\n    function getTimestamp(uint256 roundId) external view returns (uint256);\n}\n"},"src/adapters/interfaces/IEOFeedRegistryAdapter.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.25;\n\nimport { IEOFeedAdapter } from \"./IEOFeedAdapter.sol\";\n\n/**\n * @title IEOFeedRegistryAdapter\n * @notice Interface for the FeedManager contract.\n * @dev Simplified version of FeedRegistryInterface from CL.\n */\ninterface IEOFeedRegistryAdapter {\n    // V3 AggregatorV3Interface\n\n    function decimals(address base, address quote) external view returns (uint8);\n\n    function description(address base, address quote) external view returns (string memory);\n\n    function version(address base, address quote) external view returns (uint256);\n\n    function latestRoundData(\n        address base,\n        address quote\n    )\n        external\n        view\n        returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n    function getRoundData(\n        address base,\n        address quote,\n        uint80 _roundId\n    )\n        external\n        view\n        returns (uint80 roundId, int256 answer, uint256 startedAt, uint256 updatedAt, uint80 answeredInRound);\n\n    // V2 AggregatorInterface\n\n    function latestAnswer(address base, address quote) external view returns (int256 answer);\n\n    function latestTimestamp(address base, address quote) external view returns (uint256 timestamp);\n\n    function latestRound(address base, address quote) external view returns (uint256 roundId);\n\n    function getAnswer(address base, address quote, uint256 roundId) external view returns (int256 answer);\n\n    function getTimestamp(address base, address quote, uint256 roundId) external view returns (uint256 timestamp);\n\n    // Registry getters\n\n    function getFeed(address base, address quote) external view returns (IEOFeedAdapter feedAdapter);\n\n    function isFeedEnabled(address feedAdapter) external view returns (bool);\n\n    function getRoundFeed(\n        address base,\n        address quote,\n        uint80 roundId\n    )\n        external\n        view\n        returns (IEOFeedAdapter feedAdapter);\n}\n"},"src/interfaces/Errors.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.25;\n\n/*//////////////////////////////////////////////////////////////////////////\n                                EOFeedManager\n//////////////////////////////////////////////////////////////////////////*/\nerror CallerIsNotWhitelisted(address caller);\nerror MissingLeafInputs();\nerror FeedNotSupported(uint16 feedId);\nerror SymbolReplay(uint16 feedId);\n\n/*//////////////////////////////////////////////////////////////////////////\n                                EOFeedVerifier\n//////////////////////////////////////////////////////////////////////////*/\nerror CallerIsNotFeedManager();\nerror InvalidInput();\nerror InvalidProof();\nerror InvalidAddress();\nerror InvalidEventRoot();\nerror VotingPowerIsZero();\nerror AggVotingPowerIsZero();\nerror InsufficientVotingPower();\nerror SignatureVerificationFailed();\nerror ValidatorIndexOutOfBounds();\nerror ValidatorSetTooSmall();\nerror SenderNotAllowed(address sender);\n\n/*//////////////////////////////////////////////////////////////////////////\n                                EOFeedRegistryAdapter\n//////////////////////////////////////////////////////////////////////////*/\nerror FeedAlreadyExists();\nerror BaseQuotePairExists();\n"},"lib/openzeppelin-contracts/contracts/proxy/beacon/IBeacon.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/beacon/IBeacon.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev This is the interface that {BeaconProxy} expects of its beacon.\n */\ninterface IBeacon {\n    /**\n     * @dev Must return an address that can be used as a delegate call target.\n     *\n     * {UpgradeableBeacon} will check that this address is a contract.\n     */\n    function implementation() external view returns (address);\n}\n"},"lib/openzeppelin-contracts/contracts/proxy/Proxy.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/Proxy.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev This abstract contract provides a fallback function that delegates all calls to another contract using the EVM\n * instruction `delegatecall`. We refer to the second contract as the _implementation_ behind the proxy, and it has to\n * be specified by overriding the virtual {_implementation} function.\n *\n * Additionally, delegation to the implementation can be triggered manually through the {_fallback} function, or to a\n * different contract through the {_delegate} function.\n *\n * The success and return data of the delegated call will be returned back to the caller of the proxy.\n */\nabstract contract Proxy {\n    /**\n     * @dev Delegates the current call to `implementation`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _delegate(address implementation) internal virtual {\n        assembly {\n            // Copy msg.data. We take full control of memory in this inline assembly\n            // block because it will not return to Solidity code. We overwrite the\n            // Solidity scratch pad at memory position 0.\n            calldatacopy(0, 0, calldatasize())\n\n            // Call the implementation.\n            // out and outsize are 0 because we don't know the size yet.\n            let result := delegatecall(gas(), implementation, 0, calldatasize(), 0, 0)\n\n            // Copy the returned data.\n            returndatacopy(0, 0, returndatasize())\n\n            switch result\n            // delegatecall returns 0 on error.\n            case 0 {\n                revert(0, returndatasize())\n            }\n            default {\n                return(0, returndatasize())\n            }\n        }\n    }\n\n    /**\n     * @dev This is a virtual function that should be overridden so it returns the address to which the fallback\n     * function and {_fallback} should delegate.\n     */\n    function _implementation() internal view virtual returns (address);\n\n    /**\n     * @dev Delegates the current call to the address returned by `_implementation()`.\n     *\n     * This function does not return to its internal call site, it will return directly to the external caller.\n     */\n    function _fallback() internal virtual {\n        _delegate(_implementation());\n    }\n\n    /**\n     * @dev Fallback function that delegates calls to the address returned by `_implementation()`. Will run if no other\n     * function in the contract matches the call data.\n     */\n    fallback() external payable virtual {\n        _fallback();\n    }\n}\n"},"lib/openzeppelin-contracts/contracts/proxy/ERC1967/ERC1967Utils.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/ERC1967/ERC1967Utils.sol)\n\npragma solidity ^0.8.20;\n\nimport {IBeacon} from \"../beacon/IBeacon.sol\";\nimport {Address} from \"../../utils/Address.sol\";\nimport {StorageSlot} from \"../../utils/StorageSlot.sol\";\n\n/**\n * @dev This abstract contract provides getters and event emitting update functions for\n * https://eips.ethereum.org/EIPS/eip-1967[EIP1967] slots.\n */\nlibrary ERC1967Utils {\n    // We re-declare ERC-1967 events here because they can't be used directly from IERC1967.\n    // This will be fixed in Solidity 0.8.21. At that point we should remove these events.\n    /**\n     * @dev Emitted when the implementation is upgraded.\n     */\n    event Upgraded(address indexed implementation);\n\n    /**\n     * @dev Emitted when the admin account has changed.\n     */\n    event AdminChanged(address previousAdmin, address newAdmin);\n\n    /**\n     * @dev Emitted when the beacon is changed.\n     */\n    event BeaconUpgraded(address indexed beacon);\n\n    /**\n     * @dev Storage slot with the address of the current implementation.\n     * This is the keccak-256 hash of \"eip1967.proxy.implementation\" subtracted by 1.\n     */\n    // solhint-disable-next-line private-vars-leading-underscore\n    bytes32 internal constant IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n\n    /**\n     * @dev The `implementation` of the proxy is invalid.\n     */\n    error ERC1967InvalidImplementation(address implementation);\n\n    /**\n     * @dev The `admin` of the proxy is invalid.\n     */\n    error ERC1967InvalidAdmin(address admin);\n\n    /**\n     * @dev The `beacon` of the proxy is invalid.\n     */\n    error ERC1967InvalidBeacon(address beacon);\n\n    /**\n     * @dev An upgrade function sees `msg.value > 0` that may be lost.\n     */\n    error ERC1967NonPayable();\n\n    /**\n     * @dev Returns the current implementation address.\n     */\n    function getImplementation() internal view returns (address) {\n        return StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 implementation slot.\n     */\n    function _setImplementation(address newImplementation) private {\n        if (newImplementation.code.length == 0) {\n            revert ERC1967InvalidImplementation(newImplementation);\n        }\n        StorageSlot.getAddressSlot(IMPLEMENTATION_SLOT).value = newImplementation;\n    }\n\n    /**\n     * @dev Performs implementation upgrade with additional setup call if data is nonempty.\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\n     * to avoid stuck value in the contract.\n     *\n     * Emits an {IERC1967-Upgraded} event.\n     */\n    function upgradeToAndCall(address newImplementation, bytes memory data) internal {\n        _setImplementation(newImplementation);\n        emit Upgraded(newImplementation);\n\n        if (data.length > 0) {\n            Address.functionDelegateCall(newImplementation, data);\n        } else {\n            _checkNonPayable();\n        }\n    }\n\n    /**\n     * @dev Storage slot with the admin of the contract.\n     * This is the keccak-256 hash of \"eip1967.proxy.admin\" subtracted by 1.\n     */\n    // solhint-disable-next-line private-vars-leading-underscore\n    bytes32 internal constant ADMIN_SLOT = 0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103;\n\n    /**\n     * @dev Returns the current admin.\n     *\n     * TIP: To get this value clients can read directly from the storage slot shown below (specified by EIP1967) using\n     * the https://eth.wiki/json-rpc/API#eth_getstorageat[`eth_getStorageAt`] RPC call.\n     * `0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103`\n     */\n    function getAdmin() internal view returns (address) {\n        return StorageSlot.getAddressSlot(ADMIN_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new address in the EIP1967 admin slot.\n     */\n    function _setAdmin(address newAdmin) private {\n        if (newAdmin == address(0)) {\n            revert ERC1967InvalidAdmin(address(0));\n        }\n        StorageSlot.getAddressSlot(ADMIN_SLOT).value = newAdmin;\n    }\n\n    /**\n     * @dev Changes the admin of the proxy.\n     *\n     * Emits an {IERC1967-AdminChanged} event.\n     */\n    function changeAdmin(address newAdmin) internal {\n        emit AdminChanged(getAdmin(), newAdmin);\n        _setAdmin(newAdmin);\n    }\n\n    /**\n     * @dev The storage slot of the UpgradeableBeacon contract which defines the implementation for this proxy.\n     * This is the keccak-256 hash of \"eip1967.proxy.beacon\" subtracted by 1.\n     */\n    // solhint-disable-next-line private-vars-leading-underscore\n    bytes32 internal constant BEACON_SLOT = 0xa3f0ad74e5423aebfd80d3ef4346578335a9a72aeaee59ff6cb3582b35133d50;\n\n    /**\n     * @dev Returns the current beacon.\n     */\n    function getBeacon() internal view returns (address) {\n        return StorageSlot.getAddressSlot(BEACON_SLOT).value;\n    }\n\n    /**\n     * @dev Stores a new beacon in the EIP1967 beacon slot.\n     */\n    function _setBeacon(address newBeacon) private {\n        if (newBeacon.code.length == 0) {\n            revert ERC1967InvalidBeacon(newBeacon);\n        }\n\n        StorageSlot.getAddressSlot(BEACON_SLOT).value = newBeacon;\n\n        address beaconImplementation = IBeacon(newBeacon).implementation();\n        if (beaconImplementation.code.length == 0) {\n            revert ERC1967InvalidImplementation(beaconImplementation);\n        }\n    }\n\n    /**\n     * @dev Change the beacon and trigger a setup call if data is nonempty.\n     * This function is payable only if the setup call is performed, otherwise `msg.value` is rejected\n     * to avoid stuck value in the contract.\n     *\n     * Emits an {IERC1967-BeaconUpgraded} event.\n     *\n     * CAUTION: Invoking this function has no effect on an instance of {BeaconProxy} since v5, since\n     * it uses an immutable beacon without looking at the value of the ERC-1967 beacon slot for\n     * efficiency.\n     */\n    function upgradeBeaconToAndCall(address newBeacon, bytes memory data) internal {\n        _setBeacon(newBeacon);\n        emit BeaconUpgraded(newBeacon);\n\n        if (data.length > 0) {\n            Address.functionDelegateCall(IBeacon(newBeacon).implementation(), data);\n        } else {\n            _checkNonPayable();\n        }\n    }\n\n    /**\n     * @dev Reverts if `msg.value` is not zero. It can be used to avoid `msg.value` stuck in the contract\n     * if an upgrade doesn't perform an initialization call.\n     */\n    function _checkNonPayable() private {\n        if (msg.value > 0) {\n            revert ERC1967NonPayable();\n        }\n    }\n}\n"},"lib/openzeppelin-contracts/contracts/access/Ownable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\n\npragma solidity ^0.8.20;\n\nimport {Context} from \"../utils/Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * The initial owner is set to the address provided by the deployer. This can\n * later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    /**\n     * @dev The caller account is not authorized to perform an operation.\n     */\n    error OwnableUnauthorizedAccount(address account);\n\n    /**\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\n     */\n    error OwnableInvalidOwner(address owner);\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\n     */\n    constructor(address initialOwner) {\n        if (initialOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(initialOwner);\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        _checkOwner();\n        _;\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if the sender is not the owner.\n     */\n    function _checkOwner() internal view virtual {\n        if (owner() != _msgSender()) {\n            revert OwnableUnauthorizedAccount(_msgSender());\n        }\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby disabling any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        if (newOwner == address(0)) {\n            revert OwnableInvalidOwner(address(0));\n        }\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}\n"},"src/interfaces/IEOFeedVerifier.sol":{"content":"// SPDX-License-Identifier: MIT\npragma solidity 0.8.25;\n\ninterface IEOFeedVerifier {\n    /**\n     * @dev Leaf input structure\n     * @param leafIndex Index of the leaf\n     * @param unhashedLeaf Unhashed leaf data\n     *         abi encoded (uint256 id, address sender, address receiver, bytes memory data)\n     *              where bytes memory data =  abi encoded (uint16 feedId, uint256 rate, uint256 timestamp)\n     * @param proof Merkle proof of the leaf\n     */\n    struct LeafInput {\n        uint256 leafIndex;\n        bytes unhashedLeaf;\n        bytes32[] proof;\n    }\n\n    /**\n     * @dev Checkpoint structure\n     * @param epoch Epoch number\n     * @param blockNumber Block number\n     * @param eventRoot Event root of the merkle tree\n     * @param blockHash Block hash\n     * @param blockRound Block round\n     */\n    struct Checkpoint {\n        uint256 epoch;\n        uint256 blockNumber;\n        bytes32 eventRoot;\n        bytes32 blockHash;\n        uint256 blockRound;\n    }\n\n    /**\n     * @dev Validator structure\n     * @param _address Validator address\n     * @param blsKey Validator BLS key\n     * @param votingPower Validator voting power\n     */\n    struct Validator {\n        address _address;\n        uint256[4] blsKey;\n        uint256 votingPower;\n    }\n\n    /**\n     * @dev Event emitted when the validator set is updated\n     * @param currentValidatorSetLength Length of the current validator set\n     * @param currentValidatorSetHash Hash of the current validator set\n     * @param totalVotingPower Total voting power of the current validator set\n     */\n    event ValidatorSetUpdated(\n        uint256 currentValidatorSetLength, bytes32 currentValidatorSetHash, uint256 totalVotingPower\n    );\n\n    /**\n     * @dev Event emitted when the feed manager is set\n     * @param feedManager Address of the feed manager\n     */\n    event FeedManagerSet(address feedManager);\n\n    /**\n     * @notice Verifies leaf, processes checkpoint,\n     *          returns leaf data in case if checkpoint is valid and leaf is part of the merkle tree\n     * @param input leaf input data and proof (LeafInput)\n     * @param checkpoint Checkpoint data (Checkpoint)\n     * @param signature Aggregated signature of the checkpoint\n     * @param bitmap Bitmap of the validators who signed the checkpoint\n     * @return leafData Leaf data, abi encoded (uint16 feedId, uint256 rate, uint256 timestamp)\n     */\n    function verify(\n        LeafInput memory input,\n        Checkpoint calldata checkpoint,\n        uint256[2] calldata signature,\n        bytes calldata bitmap\n    )\n        external\n        returns (bytes memory leafData);\n\n    /**\n     * @notice Verifies multiple leaves, processes checkpoint,\n     *          returns leaf data in case if checkpoint is valid and leaves are part of the merkle tree\n     * @param inputs Exit leaves inputs\n     * @param checkpoint Checkpoint data\n     * @param signature Aggregated signature of the checkpoint\n     * @param bitmap Bitmap of the validators who signed the checkpoint\n     */\n    function batchVerify(\n        LeafInput[] memory inputs,\n        Checkpoint calldata checkpoint,\n        uint256[2] calldata signature,\n        bytes calldata bitmap\n    )\n        external\n        returns (bytes[] memory);\n\n    /**\n     * @notice Function to set a new validator set\n     * @param newValidatorSet The new validator set to store\n     */\n    function setNewValidatorSet(Validator[] calldata newValidatorSet) external;\n\n    /**\n     * @notice Sets the address of the feed manager.\n     * @param feedManager_ The address of the new feed manager.\n     */\n    function setFeedManager(address feedManager_) external;\n\n    /**\n     * @notice Sets allowed sender for exit events\n     * @param senders Addresses of the allowed senders\n     * @param allowed Boolean value to set the sender as allowed or not\n     */\n    function setAllowedSenders(address[] calldata senders, bool allowed) external;\n}\n"},"lib/openzeppelin-contracts-upgradeable/contracts/utils/ContextUpgradeable.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\nimport {Initializable} from \"../proxy/utils/Initializable.sol\";\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract ContextUpgradeable is Initializable {\n    function __Context_init() internal onlyInitializing {\n    }\n\n    function __Context_init_unchained() internal onlyInitializing {\n    }\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"},"lib/openzeppelin-contracts/contracts/utils/Address.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/Address.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev The ETH balance of the account is not enough to perform the operation.\n     */\n    error AddressInsufficientBalance(address account);\n\n    /**\n     * @dev There's no code at `target` (it is not a contract).\n     */\n    error AddressEmptyCode(address target);\n\n    /**\n     * @dev A call to an address target failed. The target may have reverted.\n     */\n    error FailedInnerCall();\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.8.20/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        if (address(this).balance < amount) {\n            revert AddressInsufficientBalance(address(this));\n        }\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        if (!success) {\n            revert FailedInnerCall();\n        }\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason or custom error, it is bubbled\n     * up by this function (like regular Solidity function calls). However, if\n     * the call reverted with no returned reason, this function reverts with a\n     * {FailedInnerCall} error.\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     */\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\n        if (address(this).balance < value) {\n            revert AddressInsufficientBalance(address(this));\n        }\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResultFromTarget(target, success, returndata);\n    }\n\n    /**\n     * @dev Tool to verify that a low level call to smart-contract was successful, and reverts if the target\n     * was not a contract or bubbling up the revert reason (falling back to {FailedInnerCall}) in case of an\n     * unsuccessful call.\n     */\n    function verifyCallResultFromTarget(\n        address target,\n        bool success,\n        bytes memory returndata\n    ) internal view returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            // only check if target is a contract if the call was successful and the return data is empty\n            // otherwise we already know that it was a contract\n            if (returndata.length == 0 && target.code.length == 0) {\n                revert AddressEmptyCode(target);\n            }\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Tool to verify that a low level call was successful, and reverts if it wasn't, either by bubbling the\n     * revert reason or with a default {FailedInnerCall} error.\n     */\n    function verifyCallResult(bool success, bytes memory returndata) internal pure returns (bytes memory) {\n        if (!success) {\n            _revert(returndata);\n        } else {\n            return returndata;\n        }\n    }\n\n    /**\n     * @dev Reverts with returndata if present. Otherwise reverts with {FailedInnerCall}.\n     */\n    function _revert(bytes memory returndata) private pure {\n        // Look for revert reason and bubble it up if present\n        if (returndata.length > 0) {\n            // The easiest way to bubble the revert reason is using memory via assembly\n            /// @solidity memory-safe-assembly\n            assembly {\n                let returndata_size := mload(returndata)\n                revert(add(32, returndata), returndata_size)\n            }\n        } else {\n            revert FailedInnerCall();\n        }\n    }\n}\n"},"lib/openzeppelin-contracts/contracts/utils/StorageSlot.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/StorageSlot.sol)\n// This file was procedurally generated from scripts/generate/templates/StorageSlot.js.\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Library for reading and writing primitive types to specific storage slots.\n *\n * Storage slots are often used to avoid storage conflict when dealing with upgradeable contracts.\n * This library helps with reading and writing to such slots without the need for inline assembly.\n *\n * The functions in this library return Slot structs that contain a `value` member that can be used to read or write.\n *\n * Example usage to set ERC1967 implementation slot:\n * ```solidity\n * contract ERC1967 {\n *     bytes32 internal constant _IMPLEMENTATION_SLOT = 0x360894a13ba1a3210667c828492db98dca3e2076cc3735a920a3ca505d382bbc;\n *\n *     function _getImplementation() internal view returns (address) {\n *         return StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value;\n *     }\n *\n *     function _setImplementation(address newImplementation) internal {\n *         require(newImplementation.code.length > 0);\n *         StorageSlot.getAddressSlot(_IMPLEMENTATION_SLOT).value = newImplementation;\n *     }\n * }\n * ```\n */\nlibrary StorageSlot {\n    struct AddressSlot {\n        address value;\n    }\n\n    struct BooleanSlot {\n        bool value;\n    }\n\n    struct Bytes32Slot {\n        bytes32 value;\n    }\n\n    struct Uint256Slot {\n        uint256 value;\n    }\n\n    struct StringSlot {\n        string value;\n    }\n\n    struct BytesSlot {\n        bytes value;\n    }\n\n    /**\n     * @dev Returns an `AddressSlot` with member `value` located at `slot`.\n     */\n    function getAddressSlot(bytes32 slot) internal pure returns (AddressSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BooleanSlot` with member `value` located at `slot`.\n     */\n    function getBooleanSlot(bytes32 slot) internal pure returns (BooleanSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Bytes32Slot` with member `value` located at `slot`.\n     */\n    function getBytes32Slot(bytes32 slot) internal pure returns (Bytes32Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `Uint256Slot` with member `value` located at `slot`.\n     */\n    function getUint256Slot(bytes32 slot) internal pure returns (Uint256Slot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` with member `value` located at `slot`.\n     */\n    function getStringSlot(bytes32 slot) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `StringSlot` representation of the string storage pointer `store`.\n     */\n    function getStringSlot(string storage store) internal pure returns (StringSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` with member `value` located at `slot`.\n     */\n    function getBytesSlot(bytes32 slot) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := slot\n        }\n    }\n\n    /**\n     * @dev Returns an `BytesSlot` representation of the bytes storage pointer `store`.\n     */\n    function getBytesSlot(bytes storage store) internal pure returns (BytesSlot storage r) {\n        /// @solidity memory-safe-assembly\n        assembly {\n            r.slot := store.slot\n        }\n    }\n}\n"},"lib/openzeppelin-contracts/contracts/utils/Context.sol":{"content":"// SPDX-License-Identifier: MIT\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\n\npragma solidity ^0.8.20;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n\n    function _contextSuffixLength() internal view virtual returns (uint256) {\n        return 0;\n    }\n}\n"}},"settings":{"remappings":["@openzeppelin/contracts/=lib/openzeppelin-contracts/contracts/","@openzeppelin/contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/contracts/","ds-test/=lib/ds-test/src/","forge-std/=lib/forge-std/src/","erc4626-tests/=lib/openzeppelin-contracts-upgradeable/lib/erc4626-tests/","openzeppelin-contracts-upgradeable/=lib/openzeppelin-contracts-upgradeable/","openzeppelin-contracts/=lib/openzeppelin-contracts/","openzeppelin-foundry-upgrades/=lib/openzeppelin-foundry-upgrades/src/","solidity-stringutils/=lib/openzeppelin-foundry-upgrades/lib/solidity-stringutils/"],"optimizer":{"enabled":true,"runs":10000},"metadata":{"useLiteralContent":false,"bytecodeHash":"none","appendCBOR":true},"outputSelection":{"*":{"":["ast"],"*":["abi","evm.bytecode","evm.deployedBytecode","evm.methodIdentifiers","metadata","storageLayout"]}},"evmVersion":"paris","viaIR":false,"libraries":{}}}
