// SPDX-License-Identifier: MIT
pragma solidity 0.8.25;

import { Test } from "forge-std/Test.sol";
import { stdJson } from "forge-std/Script.sol";
import { Utils } from "../utils/Utils.sol";
import { IEOFeedVerifier } from "../../src/interfaces/IEOFeedVerifier.sol";
import { EOFeedManager } from "../../src/EOFeedManager.sol";
import { EOFeedRegistryAdapter } from "../../src/adapters/EOFeedRegistryAdapter.sol";
import { EOFeedVerifier } from "../../src/EOFeedVerifier.sol";
import { DeployNewTargetContractSet } from "../../script/deployment/DeployNewTargetContractSet.s.sol";
import { DeployFeedRegistryAdapter } from "../../script/deployment/DeployFeedRegistryAdapter.s.sol";
import { DeployFeeds } from "../../script/deployment/DeployFeeds.s.sol";
import { SetupCoreContracts } from "../../script/deployment/setup/SetupCoreContracts.s.sol";
import { EOJsonUtils } from "../..//script/utils/EOJsonUtils.sol";

// solhint-disable max-states-count
// solhint-disable var-name-mixedcase
// solhint-disable ordering

abstract contract IntegrationBaseTests is Test, Utils {
    using stdJson for string;

    struct DecodedData {
        IEOFeedVerifier.Validator[] validatorSet;
        uint256[] secrets;
        IEOFeedVerifier.LeafInput[] leafInputs1;
        bytes32 merkleRoot1;
        uint256 blockNumber1;
        bytes nonSignersBitmap1;
        uint256[2] sigG1_1;
        uint256[4] apkG2_1;
        IEOFeedVerifier.LeafInput[] leafInputs2;
        bytes32 merkleRoot2;
        uint256 blockNumber2;
        bytes nonSignersBitmap2;
        uint256[2] sigG1_2;
        uint256[4] apkG2_2;
        IEOFeedVerifier.LeafInput[] leafInputs3;
        bytes32 merkleRoot3;
        uint256 blockNumber3;
        bytes nonSignersBitmap3;
        uint256[2] sigG1_3;
        uint256[4] apkG2_3;
    }

    EOFeedManager public _feedManager;
    EOFeedRegistryAdapter public _feedRegistryAdapter;
    EOFeedVerifier public _feedVerifier;

    address public _publisher;
    address public _owner;

    // TODO: pass to ts as argument
    uint256 public validatorSetSize;
    IEOFeedVerifier.Validator[] public validatorSet;

    uint256 public constant VALIDATOR_SET_SIZE = 10;

    // generated by _generatePayload function
    IEOFeedVerifier.LeafInput[] public input;
    IEOFeedVerifier.VerificationParams[] public vParams;

    function setUp() public {
        EOJsonUtils.Config memory configStructured = EOJsonUtils.getParsedConfig();

        _publisher = configStructured.publishers[0];
        _owner = configStructured.targetContractsOwner;

        DeployNewTargetContractSet mainDeployer = new DeployNewTargetContractSet();
        DeployFeedRegistryAdapter adapterDeployer = new DeployFeedRegistryAdapter();
        SetupCoreContracts coreContractsSetup = new SetupCoreContracts();
        DeployFeeds feedsDeployer = new DeployFeeds();

        address feedVerifierAddr;
        address feedManagerAddr;

        (, feedVerifierAddr, feedManagerAddr) = mainDeployer.run(address(this));
        coreContractsSetup.run(_owner);
        address feedRegistryAdapterAddress;
        (, feedRegistryAdapterAddress) = adapterDeployer.run();
        feedsDeployer.run(_owner);

        _feedVerifier = EOFeedVerifier(feedVerifierAddr);
        _feedManager = EOFeedManager(feedManagerAddr);
        _feedRegistryAdapter = EOFeedRegistryAdapter(feedRegistryAdapterAddress);

        _generatePayload();
        _setValidatorSet(validatorSet);
    }

    function getData() private returns (bytes memory) {
        string[] memory cmd = new string[](3);
        cmd[0] = "npx";
        cmd[1] = "ts-node";
        cmd[2] = "test/utils/ts/createVerifyableData.ts";
        return vm.ffi(cmd);
    }

    function _setValidatorSet(IEOFeedVerifier.Validator[] memory _validatorSet) internal {
        vm.prank(_owner);
        _feedVerifier.setNewValidatorSet(_validatorSet);
    }

    function _setSupportedFeeds(uint16[] memory feedsSupported) internal {
        bool[] memory isSupported = new bool[](feedsSupported.length);
        for (uint256 i = 0; i < feedsSupported.length; i++) {
            isSupported[i] = true;
        }
        vm.prank(_owner);
        _feedManager.setSupportedFeeds(feedsSupported, isSupported);
    }

    function _whitelistPublisher(address publisher) internal {
        address[] memory publishers = new address[](1);
        bool[] memory isWhitelisted = new bool[](1);
        publishers[0] = publisher;
        isWhitelisted[0] = true;
        vm.prank(_owner);
        _feedManager.whitelistPublishers(publishers, isWhitelisted);
    }

    function _generatePayload() internal virtual {
        DecodedData memory decoded = abi.decode(getData(), (DecodedData));

        delete validatorSet;
        delete input;
        delete vParams;
        validatorSetSize = decoded.validatorSet.length;
        for (uint256 i = 0; i < validatorSetSize; i++) {
            validatorSet.push(decoded.validatorSet[i]);
        }
        for (uint256 i = 0; i < decoded.leafInputs1.length; i++) {
            input.push(decoded.leafInputs1[i]);
        }

        // full signature - 4/4 voters
        vParams.push(
            IEOFeedVerifier.VerificationParams({
                blockNumber: decoded.blockNumber1,
                eventRoot: decoded.merkleRoot1,
                signature: decoded.sigG1_1,
                apkG2: decoded.apkG2_1,
                nonSignersBitmap: decoded.nonSignersBitmap1
            })
        );
    }
}
