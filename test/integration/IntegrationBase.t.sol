// SPDX-License-Identifier: MIT
pragma solidity 0.8.25;

import { Test } from "forge-std/Test.sol";
import { stdJson } from "forge-std/Script.sol";
import { Utils } from "../utils/Utils.sol";
import { IEOFeedVerifier } from "../../src/interfaces/IEOFeedVerifier.sol";
import { EOFeedRegistry } from "../../src/EOFeedRegistry.sol";
import { EOFeedVerifier } from "../../src/EOFeedVerifier.sol";
import { DeployNewTargetContractSet } from "../../script/deployment/DeployNewTargetContractSet.s.sol";
import { EOJsonUtils } from "../../script/utils/EOJsonUtils.sol";
import { DeployFeedRegistryAdapter } from "../../script/deployment/DeployFeedRegistryAdapter.s.sol";
// solhint-disable max-states-count

abstract contract IntegrationBaseTests is Test, Utils {
    using stdJson for string;

    EOFeedRegistry public feedRegistry;
    EOFeedVerifier public feedVerifier;

    DeployNewTargetContractSet public mainDeployer;
    DeployFeedRegistryAdapter public adapterDeployer;

    address public publisher = makeAddr("publisher");
    address public owner;
    uint16[] public symbols;
    uint256[] public rates;
    uint256[] public timestamps;
    uint256 public blockRound = 0;
    uint256 public epochNumber = 1;
    // TODO: pass to ts as argument
    uint256 public blockNumber = 1;
    uint256 public childChainId;
    uint256 public validatorSetSize;
    bytes[] public symbolData;
    IEOFeedVerifier.Validator[] public validatorSet;

    bytes32 public constant DOMAIN = keccak256("DOMAIN_CHECKPOINT_MANAGER");
    uint256 public constant VALIDATOR_SET_SIZE = 10;
    string public config;

    // generated by _generatePayload function
    IEOFeedVerifier.LeafInput[] public input;
    IEOFeedVerifier.Checkpoint[] public checkpoints;
    uint256[2][] public signatures;
    bytes[] public bitmaps;

    function setUp() public {
        mainDeployer = new DeployNewTargetContractSet();
        adapterDeployer = new DeployFeedRegistryAdapter();

        address feedVerifierAddr;
        address feedRegistryAddr;

        (,, feedVerifierAddr, feedRegistryAddr) = mainDeployer.run();
        // todo: impement tests for adapters
        // (address feedImplementation, address adapterProxy) = adapterDeployer.run();

        feedVerifier = EOFeedVerifier(feedVerifierAddr);
        feedRegistry = EOFeedRegistry(feedRegistryAddr);

        config = EOJsonUtils.getConfig();
        owner = config.readAddress(".targetContractsOwner");
        childChainId = config.readUint(".childChainId");

        _seedSymbolData();
        _generatePayload(symbolData);

        this._setValidatorSet(validatorSet);
        this._setSupportedSymbols(symbols);
        _whitelistPublisher(publisher);
    }

    function _setValidatorSet(IEOFeedVerifier.Validator[] calldata _validatorSet) public {
        vm.prank(owner);
        feedVerifier.setNewValidatorSet(_validatorSet);
    }

    function _setSupportedSymbols(uint16[] memory symbolsSupported) public {
        bool[] memory isSupported = new bool[](symbolsSupported.length);
        for (uint256 i = 0; i < symbolsSupported.length; i++) {
            isSupported[i] = true;
        }
        vm.prank(owner);
        feedRegistry.setSupportedSymbols(symbolsSupported, isSupported);
    }

    function _whitelistPublisher(address _publisher) public {
        address[] memory publishers = new address[](1);
        bool[] memory isWhitelisted = new bool[](1);
        publishers[0] = _publisher;
        isWhitelisted[0] = true;
        vm.prank(owner);
        feedRegistry.whitelistPublishers(publishers, isWhitelisted);
    }

    function _generatePayload(bytes[] memory _symbolData) internal virtual;

    function _seedSymbolData() internal virtual;
}
